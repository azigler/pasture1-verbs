@create $root_class named Generic Waif:Generic Waif
@verb #118:":initialize" this none this
@program #118::initialize
"the perms check you want is probably:";
if ((caller == this) || (caller == this.class))
  "allows pass() and :new()";
else
  raise(E_PERM);
endif
.

@verb #118:"new" this none this
@program #118:new
"WIZARDLY";
set_task_perms(caller_perms());
player = caller_perms();
w = new_waif();
w:initialize(@args);
return w;
.

@prop #118.":wizard" 0 ""
@prop #118."help_msg" {} rc
;;#118.("help_msg") = {"A waif is a kind of datatype in the MOO programming language, akin to integers, floating point numbers, strings, lists, objects and errors.", "", "Waifs are like objects in that they have inherited properties and verbs.  They are unlike objects in that they do not have object numbers, and do not ordinarily have a name, aliases, a location, or a description -- although they could.", "", "For those who program in C, it may be helpful to think of a waif as being like the 'struct' datatype:  A waif is a collection of named values.  (A list is a collection of ordered values.)", "", "Every waif inherits its properties and verbs from its 'class', which is an actual object that is a descendant of $waif.  Only properties and verbs whose names begin with a colon are inherited by the instantiated waif.  To create a waif, you invoke the verb <class>:new(), which returns the newly-minted waif as it's value.", "", "A logical time to consider using waifs is in lieu of storing data as a list of lists.  Let's consider an example.  Suppose I want to create a bot that serves drinks and canapes, and for reasons of my own I want to specify what drinks are available rather than let some lout order a glass of diesel fuel at my tea party.  So I am going to create a list of drinks, the kind of container the drink comes in, and the number of sips in each, such that a cup of tea might have more sips (and thus take longer to drink) than a glass of sherry.", "", "If I were to implement my drink list as a list of lists, I might do", "", "  @prop bot.drink_options {{\"tea\", \"cup\", 10}, {\"sherry\", \"glass\", 4}, {\"milk\", \"glass\", 15}}", "", "You can see that a glass of milk has more in it than a glass of sherry.  BUT, if you were looking at this code for the first time, you might not know that the third number in that list refers to quantity.  For longer sublists, it can get very confusing, indeed.", "", "To implement this using waifs, you would first make an object, a kid of $waif, that you would use as a drink specification:", "", "  @create $waif named \"drink specification\",\"dspec\"", "", "You would then own an object with the generic waif as its parent.  Next you would add properties to this object that the waifs are to inherit:", "", "  @prop dspec.:drink_name \"\" rc", "  @prop dspec.:drink_container \"\" rc", "  @prop dspec.:sips_per_container 0 rc", "", "Notice that each property name begins with a colon.  Property names that don't begin with a colon are not inherited by the waifs (.name, for example).", "", "Since your drink specification is a kid of $waif, it inherits the verb :new that can be used to create a waif.  Here is how we would make a few:", "", "  @prop bot.drink_options {} rc", "  @prop bot.drink_spec <dspec> rc", "", "  @verb bot:add_drink tnt rxd", "", "  @program bot:add_drink", "  \"Adds a drink specification to this bot's .drink_options property.\";", "  \"Maybe put in some code only to let the owner do this, but that is not germaine to this example.\";", "  {drink_name, drink_container, sips_per_container} = args;", "  new_spec = this.drink_spec:new();", "  new_spec.drink_name = drink_name;", "  new_spec.drink_container = drink_container;", "  new_spec.sips_per_container = sips_per_container;", "  this.drink_options = {@this.drink_options, new_spec};", "  \"A robust version of this verb would check for proper data types in the args, maybe look for duplicates first, etc.\";", "  .", "", "Later on you might want to specify a color for each drink, so that if it comes in a dribble glass, you can say what color the stain on your poor victim's tie is.  You would add the property (.:color -- remember the colon) to the drink spec object, and voila, it would exist on all the waifs.  You would need to set the individual values, of course, but you wouldn't have to do gymnastics on sublists in lists, which can be a delicate operation indeed.", "", "Further information about waifs is available at http://www.ben.com/MOO/waif.html and http://www.ben.com/MOO/waif-progman.html"}
;;#118.("aliases") = {"Generic Waif"}
;;#118.("object_size") = {6412, 1670918400}

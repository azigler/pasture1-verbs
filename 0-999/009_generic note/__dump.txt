@create $thing named generic note:generic note
@verb #9:"r*ead" this none none rxd
@program #9:read
if (!this:is_readable_by(valid(caller_perms()) ? caller_perms() | player))
  player:tell("Sorry, but it seems to be written in some code that you can't read.");
elseif (!length(this.text))
  player:tell("The note is empty.");
else
  this:look_self();
  player:tell();
  player:tell_lines_suspended(this:text());
  player:tell();
  player:tell("(You finish reading.)");
endif
.

@verb #9:"er*ase" this none none rxd
@program #9:erase
if (this:is_writable_by(valid(caller_perms()) ? caller_perms() | player))
  this:set_text({});
  player:tell("Note erased.");
else
  player:tell("You can't erase this note.");
endif
.

@verb #9:"wr*ite" any on this rxd
@program #9:write
if (this:is_writable_by(valid(caller_perms()) ? caller_perms() | player))
  this:set_text({@this.text, dobjstr});
  $you:say_action(("%N %<writes> \"" + dobjstr) + "\" on %i.");
else
  player:tell("You can't write on this note.");
endif
.

@verb #9:"del*ete rem*ove" any from this
@program #9:delete
if (!this:is_writable_by(player))
  player:tell("You can't modify this note.");
elseif (!dobjstr)
  player:tell("You must tell me which line to delete.");
else
  line = toint(dobjstr);
  if (line < 0)
    line = (line + length(this.text)) + 1;
  endif
  if ((line <= 0) || (line > length(this.text)))
    player:tell("Line out of range.");
  else
    this:set_text(listdelete(this.text, line));
    player:tell("Line deleted.");
  endif
endif
.

@verb #9:"encrypt" this with any
@program #9:encrypt
set_task_perms(player);
key = $lock_utils:parse_keyexp(iobjstr, player);
if (typeof(key) == STR)
  player:tell("That key expression is malformed:");
  player:tell("  ", key);
else
  try
    this.encryption_key = key;
    player:tell("Encrypted ", this.name, " with this key:");
    player:tell("  ", $lock_utils:unparse_key(key));
  except error (ANY)
    player:tell(error[2], ".");
  endtry
endif
.

@verb #9:"decrypt" this none none
@program #9:decrypt
set_task_perms(player);
try
  dobj.encryption_key = 0;
  player:tell("Decrypted ", dobj.name, ".");
except error (ANY)
  player:tell(error[2], ".");
endtry
.

@verb #9:"text" this none this
@program #9:text
cp = caller_perms();
if ($perm_utils:controls(cp, this) || this:is_readable_by(cp))
  return this.text;
else
  return E_PERM;
endif
.

@verb #9:"is_readable_by" this none this
@program #9:is_readable_by
key = this.encryption_key;
return (key == 0) || $lock_utils:eval_key(key, args[1]);
.

@verb #9:"set_text" this none this
@program #9:set_text
cp = caller_perms();
newtext = args[1];
if ($perm_utils:controls(cp, this) || this:is_writable_by(cp))
  if (typeof(newtext) == LIST)
    this.text = newtext;
  else
    return E_TYPE;
  endif
else
  return E_PERM;
endif
.

@verb #9:"is_writable_by" this none this
@program #9:is_writable_by
who = args[1];
wr = this.writers;
if ($perm_utils:controls(who, this))
  return 1;
elseif (typeof(wr) == LIST)
  return who in wr;
else
  return wr;
endif
.

@verb #9:"mailme @mailme" this none none
@program #9:mailme
"Usage:  mailme <note>";
"  uses $network to sends the text of this note to your REAL internet email address.";
if (!this:is_readable_by(player))
  return player:tell("Sorry, but it seems to be written in some code that you can't read.");
elseif (!(email = $wiz_utils:get_email_address(player)))
  return player:tell("Sorry, you don't have a registered email address.");
elseif (!$network.active)
  return player:tell("Sorry, internet mail is disabled.");
elseif (!(text = this:text()))
  return player:tell($string_utils:pronoun_sub("%T is empty--there wouldn't be any point to mailing it."));
endif
player:tell("Mailing ", this:title(), " to ", email, ".");
player:tell("... ", length(text), " lines ...");
suspend(0);
$network:sendmail(email, this:titlec(), "", @text);
.

@prop #9."writers" {} rc
@prop #9."encryption_key" 0 c
@prop #9."text" {} c
;;#9.("aliases") = {"generic note"}
;;#9.("description") = "There appears to be some writing on the note ..."
;;#9.("object_size") = {9902, 1670400000}

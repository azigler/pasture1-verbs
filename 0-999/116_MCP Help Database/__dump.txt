@create $generic_help named MCP Help Database:MCP Help Database
@prop #116."mcp" {} rc
;;#116.("mcp") = {"MCP", "1==", "", "Rewritten from `help mcp-spec' June 7, 1994 by Jay Carlson.  Comments solicited; send mail to the `@proj usability client MCP' mailing list, moo-cows, or private email to j@io.com.", "", "The MOO Client Protocol is a standard for transmitting structured \"requests\" between MUD clients and servers.  The original specification is available as `help mcp-spec', but the skeleton of a rewrite is here:", "", "mcp-goals -- History and goals of the MCP protocol", "mcp-syntax -- Syntactic description of MCP requests", "mcp-semantics -- Semantics of MCP requests", "mcp-requests -- Documented request types"}
@prop #116."mcp-authentication" {} rc
;;#116.("mcp-authentication") = {"MCP authentication", "1=================", "", "When an MCP client connects to an MCP server, it may set an `authentication key' for the duration of the connection.  The key is simply a string (in the format described in `help mcp-syntax') that must be sent by the server with every MCP request for the request to be authenticated.  The authentication key is a secret shared by the client and the MCP subsystem of the server.", "", "The syntax for setting the authentication key is:", "", "  #$#authentication-key <auth-key>", " ", "", "Clients may accept, reject, or query the user about MCP requests that are either missing an authentication key or have the incorrect key.", "", "Typically, clients will generate a random number or string on connection and use it as their key.", "", "Proposal: eliminate reference to client and server, and make the authentication scheme symmetric."}
@prop #116."mcp-display-url" {} rc
;;#116.("mcp-display-url") = {"MCP display-url request", "1======================", "", "This is a simplification of the display-url request specification used by AstroVR.  It is intended to represent baseline functionality that most clients can implement.", "", "display-url presents a document specified by a URL to the user.", "", "Keywords", "2=======", "", "url:", "3===", "", "Required.  Must be an absolute URL, starting with a name scheme (such as \"http:\").", "", "Example", "2======", "", "Present the JHM home page:", "", "  #$#display-url 12345678 url: \"http://jhm.ccs.neu.edu:7043/\"", " "}
@prop #116."mcp-edit" {} rc
;;#116.("mcp-edit") = {"MCP edit* requests", "1=================", "", "A multi-line request for the client to invoke a local editor on the attached text, and later send the edited text to the server.", "", "Keywords", "2=======", "", "type:", "3====", "", "Optional.  Suggested values include program, text, string, value and mail.  The client may be able to use this information to provide a specialized editing mode.", "", "name:", "3====", "", "Optional.  A human-readable descriptive name for what's being edited.", "", "In existing Emacs clients, this is used for the buffer name.  In tkmoo, name: is used as the window and icon title for the workspace editing the text.", "", "upload:", "3======", "", "Required.  Specifies a line to prefix the edited text with before sending to the server.  When the text is sent to the server, it is followed by a line of a single period.", "", "Notes", "2====", "", "Typically the upload: value will be a command that starts reading input from the player, like @paste or @qsend; the MOO will use $command_utils:read_lines() to consume the uploaded lines.", "", "Proposal: Every known use of #$#edit requires \".\" as its final line sent back to the server.  Worse, it's not defined that dot-quoting should be performed on the uploaded text, which $command_utils:read_lines() expects.  We should either explicitly state these things, or we should use multi-line MCP requests to send the text back to the server.", "", "Examples", "2=======", "", "A request to provide an editing session for a property:", "", "  #$#edit* 12345678 type: text name: Dave.test upload: \"@set-note-text #75.test\"", "  @@@This is a test.", "  @@@", "  #$#END", "", "A request to provide an editing session for a verb:", "", "  #$#edit* 12345678 type: program name: Dave:test upload: \"@program #75:test none none none\"", "  @@@player:tell(\"This is a test.\");", "  #$#END"}
@prop #116."mcp-ftp" {} rc
;;#116.("mcp-ftp") = {"MCP ftp request", "1==============", "", "I don't understand the semantics of the ftp request fully.  AstroVR uses this protocol to move remote files into users' directories.", "", "This specification does not specify whether anonymous ftp or authenticated ftp is used.", "", "Keywords", "2=======", "", "host:", "3====", "", "Required.  Name of the FTP host containing the document.", "", "directory:", "3=========", "", "Required.  The directory containing the document.", "", "file:", "3====", "", "Required.  The filename of the document.", "", "type:", "3====", "", "Required.  File type of the document.  Possible values are \"ascii\", \"binary\", \"fits\", \"plaintext\", \"postscript\", \"compressed\", and \"tar\".", "", "destination:", "3===========", "", "Required.  Directory on the local machine the document is to be placed in.", "", "Example", "2======", "", "Upload a file from an anonymous ftp site:", "", "  #$#ftp 12345678 host: ipac.caltech.edu directory: /pub/deposit file: mud.el.Z type: \"compressed ascii\" destination: clients/mud.el.Z", " "}
@prop #116."mcp-goals" {} rc
;;#116.("mcp-goals") = {"MCP goals", "1========", "", "Most MUD clients and servers communicate by an informal protocol: lines of printable ASCII characters separated by newlines.  This is closely related to the TELNET protocol, which will in fact interoperate with MUD servers.  But TELNET clients don't provide user interface support for even the simplest of MUD tasks.  Specialized MUD clients provided these tools.", "", "Once people started to use clients, several realized that intelligence and user interface closer to the user could be exploited by the MUD.  ", "", "In particular, the LambdaCore editor system allows an option to ship whole documents (to a mud.el variant) to be edited locally, then returned.  The $gopher system can direct clients to fetch Gopher text directly (presenting a better UI and avoiding funneling texts through the MOO).", "", "Such \"requests\" are out of band; that is, they can occur at any point in the interaction between client and server.  In particular, client requests may occur while a MOO is using the read() primitive.  The MOO server has a compile-time option to process lines starting with a given prefix as if they were truly out of band.", "", "MCP is a simple protocol for transmitting structured messages between client and server.  It traffics in \"requests\", which have types, properties, and optional multi-line extensions.  Standard requests exist for local editing, URL display and gopher access."}
@prop #116."mcp-gopher" {} rc
;;#116.("mcp-gopher") = {"MCP gopher request", "1=================", "", "The original MOO $gopher system used a private protocol.  This is a rendering of it into MCP.  It has become deprecated in favor of display-url.", "", "Keywords", "2=======", "", "host:", "3====", "", "Required.  Name of the gopher host to connect to.", "", "port:", "3====", "", "Optional.  Port number to connect to on gopher host; defaults to 70.", "", "path:", "3====", "", "Optional.  Pathname to send to the gopher host.  Defaults to the empty string.", "", "description:", "3===========", "", "Required.  Description string; first character is the gopher type character, rest of characters are the human-readable name of the object.", "", "Proposal: separate type from description.", "", "Example", "2======", "", "A request to retrive Gustavus Adolphus College's root menu:", "", "  #$#gopher 12345678 host: gopher.gac.edu description: \"1Gustavus Adolphus College\"", " ", "", "Note that port and path default to 70 and \"\" respectively."}
@prop #116."mcp-requests" {} rc
;;#116.("mcp-requests") = {"MCP requests", "1===========", "", "There are several standard MCP request types.  If clients provide functionality similar to those described below, they should implement the MCP request as documented.", "", "mcp-edit -- Perform local editing on a text", "mcp-gopher -- Display a gopher text to the user", "mcp-ftp -- Use ftp to download a file to the user's machine", "mcp-display-url -- Display a URL to the user"}
@prop #116."mcp-semantics" {} rc
;;#116.("mcp-semantics") = {"MCP request semantics", "1====================", "", "An MCP request is of the general form:", "", "  #$#<request-name>[*][ <auth-key>][ <keyword>: <value>]...", " ", "", "<request-name> identifies the `type' of the request.  The type of the request can be thought of as a function that processes the structures in the rest of the line.", "", "<auth-key> is an optional authentication key.  See `help mcp-authentication'.", "", "The set of <keyword>: <value> pairs are a function mapping <keyword>s onto <value>s.  <keyword>s are names of arguments to the request; <value>s are the corresponding values of arguments.", "", "Duplicate <keyword>s are not allowed.  Arbitrary order of <keyword>: <value> pairs is allowed.", "", "Specific <keyword>s may be optional for a given request type, with default <value>s assumed.", "", "<keyword>s may be unrecognized by a request type.  A suggested strategy for request handlers is to ignore any <keyword>s they don't understand."}
@prop #116."mcp-spec" {} rc
;;#116.("mcp-spec") = {"MOO CLIENT REQUEST PROTOCOL", "===========================", "", "Erik Ostrom, Dave Van Buren, Pavel Curtis, David Nichols, Jay Carlson", "", "22 Feb 1993", "", "Conversion to `help help-format' 21 May 1994 by Jay Carlson.", "", "(Any first-person pronouns refer to Erik.)", "", "AUTHENTICATION", "--------------", "", "An authentication key is generated and uploaded by the client to the server at login.  Proposed method:", "", "  #$#authentication-key <key>", " ", "", "This requires that the server be compiled with OUT_OF_BAND_PREFIX set to \"#$#\".  (It's actually possible to do it as a verb on $player, but many MOOs have a programmer command \"#\" which does something very different.)  The authentication key may not contain spaces, double-quotes, colons, or backslashes.", "", "GENERAL RULES", "-------------", "", "String sent by server:", "", "  #$#<request-name><*-if-data-follows> [<auth-key>] <keyword>: <value> ...", " ", "", "An identifying tag #$# is placed at the beginning of the request line.", "", "  o  <request-name> is the type of request, e.g. \"edit\" or \"ftp\".", "  o  <request-name> cannot contain spaces, double-quotes, backslashes, or asterisks.", "  o  <*-if-data-follows> is either \"*\" if this request is followed by additional lines of data, or the empty string.", "  o  <keyword> is the name of an argument to the request.  Keywords cannot contain spaces, double-quotes, colons, or backslashes.", "  o  <value> is the value of the corresponding argument.  A <value> can contain any printing ASCII character (including space), but must be quoted in the standard MOO style (with double quotes, using backslash to escape quotes and backslashes) if it either contains spaces or is the empty string.  Arbitrary order of keyword: value pairs is allowed.", "", "Keyword: value pairs may be optional.  We haven't discussed what clients should do with unrecognized keywords; my plan is for the client simply to ignore them and work with the keywords it recognizes.", "", "REQUEST DEFINITIONS", "-------------------", "", "edit", "====", "", "type: <program|text|string|value|mail|...>", "", "Type of information.  Clients may or may not be able to use a special editing mode depending on type.", "", "name: <name>", "", "User-friendly indication of what's in this.  Good for buffer name.", "", "upload: <command>", "", "Command to use to begin upload of this text.", "", "ftp", "===", "", "host: <name>", "", "Name of the host that has the document.", "", "directory: <dir>", "", "Name of the directory that the document is in.", "", "file: <name>", "", "Name of the file within the directory.", "", "type: <type>", "", "Type of document.  Current types include ($ftp.recognized_types):", "", "      {\"ascii\", \"binary\", \"fits\", \"plaintext\", \"postscript\",", "       \"compressed\", \"tar\"}", "", "destination: <dir>", "", "Place to store the document locally.  I don't fully understand this.", "", "gopher", "======", "", "(Larry has a local-gopher protocol--this is my attempt to render it into the New Protocol.)", "", "host: <name>", "", "Name of the host to connect to.", "", "port: <number>", "", "Port to connect to.  Default is 70.", "", "path: <string>", "", "String to send to the gopher server.  Default is the empty string.", "", "description:", "", "Description string.  First character is the type character, rest of characters are human-readable name of object.  This seems unnecessarily arcane to me--why not separate these?", "", "EXAMPLES", "--------", "", "A request to provide an editing session for a property.  The request is followed by lines of data, prepended with a special tag (@@@, unless someone has strong feelings about changing it), and marked at the end with another tag (#$#END, again subject to change).  The advantage of this over dot-quoting is that it should be fairly easy for the client to figure out if there's been some breakage on the server end and the transmission has terminated early.  (A line that doesn't start with @@@ and isn't #$#END should set off warning bells.)", "", "  #$#edit* 12345678 type: text name: Dave.test upload: \"@set-note-text #75.test\"", "  @@@This is a test.", "  @@@", "  #$#END", "", "A request to provide an editing session for a verb.", "", "  #$#edit* 12345678 type: program name: Dave:test upload: \"@program #75:test none none none\"", "  @@@player:tell(\"This is a test.\");", "  #$#END", "", "A request to upload a file from an anonymous ftp site.  The request line contains all the data necessary.", "", "  #$#ftp 12345678 host: ipac.caltech.edu directory: /pub/deposit file: mud.el.Z type: \"compressed ascii\" destination: clients/mud.el.Z", " ", "", "A request to retrieve a document from a gopher server.", "", "  #$#gopher 12345678 host: gopher.gac.edu description: \"1Gustavus Adolphus College\"", " ", "", "In this case, we take advantage of default values for the port: and path: arguments (\"70\" and \"\", respectively)."}
@prop #116."mcp-syntax" {} rc
;;#116.("mcp-syntax") = {"MCP request syntax", "1=================", "", "Input and output to and from client and server is presumed to be divided into records (called `lines' hereafter).", "", "An MCP request is of the general form:", "", "  #$#<request-name>[*][ <auth-key>][ <keyword>: <value>]...", " ", "", "\"#$#\" must be the first three characters in the line.", "", "<request-name> is a string of one or more printable ASCII characters.  It may not contain spaces, double-quotes, backslashes or asterisks.", "", "Proposal: require <request-name> to start with a letter.  This reserves a substantial part of the namespace for private out-of-band protocols, or other protocol extensions.", "", "<auth-key> is a string of one or more printable ASCII characters.  It may not contain spaces, double-quotes, colons or backslashes.", "", "<keyword> is a string of one or more printable ASCII characters.  It may not contain spaces, double-quotes, colons, or backslashes.", "", "<value> is ", "", "  o  a string of one or more printable ASCII characters not containing spaces, double-quotes or backslashes ", "  o  OR is a string of zero or more printable ASCII characters, enclosed in double-quotes, with double-quotes and backslashes inside the string `quoted' by preceding them with a backslash.", "", "Note that the empty string must be quoted.  Also, the ASCII TAB character is not allowed in <value>s, at all.", "", "Proposal: disallow unquoted <value>s with colons in them.  This is not strictly necessary, but it could detect some bugs in MCP request generators.", "", "If the asterisk after <request-name> is present, this line starts a `multi-line request'.  Zero or more lines of data associated with the request follow, prepended with \"@@@\".  These lines are terminated with a single line of the form \"#$#END\".", "", "Note that the 1.7.7 LambdaMOO server cannot properly handle multi-line requests sent by a client if OUT_OF_BAND_PREFIX is defined as \"#$#\".", "", "Proposal: multi-line requests, in their current form, should be deprecated in favor of some other construct providing this functionality."}
@prop #116."mcp-x-audio" {} rc
;;#116.("mcp-x-audio") = {"MCP x-audio request", "1==================", "", "This is a description of the interim protocol tkmoo uses to provide a single channel of multicast audio.  New requests change the channel.", "", "Keywords", "2=======", "", "my-name", "3======", "", "Optional.  Name to identify the user inside a multicast conference.  Defaults to username.", "", "key", "3==", "", "Optional.  Encryption key for the channel.  Defaults to \"\", which is no key.", "", "address", "3======", "", "Required.  Multicast address ", "", "ttl", "", "", "port", "", "title", ""}
@prop #116."mcp-index" {} rc
;;#116.("mcp-index") = {"*index*", "MCP help topics"}
;;#116.("index_cache") = {"mcp-index"}
;;#116.("aliases") = {"MCP Help Database"}
;;#116.("description") = "A help database of the standard form in need of a description. See `help $generic_help'..."
;;#116.("object_size") = {23287, 1669929999}

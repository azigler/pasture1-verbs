@create $root_class named generic thing:generic thing
@verb #5:"g*et t*ake" this none none rxd
@program #5:get
set_task_perms(callers() ? caller_perms() | player);
if (this.location == player)
  player:tell("You already have that!");
elseif (this.location != player.location)
  player:tell("I don't see that here.");
else
  this:moveto(player);
  if (this.location == player)
    player:tell(this:take_succeeded_msg() || "Taken.");
    if (msg = this:otake_succeeded_msg())
      player.location:announce(player.name, " ", msg);
    endif
  else
    player:tell(this:take_failed_msg() || "You can't pick that up.");
    if (msg = this:otake_failed_msg())
      player.location:announce(player.name, " ", msg);
    endif
  endif
endif
.

@verb #5:"d*rop th*row" this none none rxd
@program #5:drop
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that.");
elseif (!player.location:acceptable(this))
  player:tell("You can't drop that here.");
else
  this:moveto(player.location);
  if (this.location == player.location)
    player:tell_lines(this:drop_succeeded_msg() || "Dropped.");
    if (msg = this:odrop_succeeded_msg())
      player.location:announce(player.name, " ", msg);
    endif
  else
    player:tell_lines(this:drop_failed_msg() || "You can't seem to drop that here.");
    if (msg = this:odrop_failed_msg())
      player.location:announce(player.name, " ", msg);
    endif
  endif
endif
.

@verb #5:"moveto" this none this
@program #5:moveto
where = args[1];
"if (!valid(where) || this:is_unlocked_for(where))";
if (this:is_unlocked_for(where))
  pass(where);
endif
.

@verb #5:"take_failed_msg take_succeeded_msg otake_failed_msg otake_succeeded_msg drop_failed_msg drop_succeeded_msg odrop_failed_msg odrop_succeeded_msg" this none this
@program #5:take_failed_msg
set_task_perms(caller_perms());
return $string_utils:pronoun_sub(this.(verb));
.

@verb #5:"gi*ve ha*nd" this to any rxd
@program #5:give
set_task_perms(callers() ? caller_perms() | player);
if (this.location != player)
  player:tell("You don't have that!");
elseif (!valid(player.location))
  player:tell("I see no \"", iobjstr, "\" here.");
elseif ($command_utils:object_match_failed(who = player.location:match_object(iobjstr), iobjstr))
elseif (who.location != player.location)
  player:tell("I see no \"", iobjstr, "\" here.");
elseif (who == player)
  player:tell("Give it to yourself?");
else
  this:moveto(who);
  if (this.location == who)
    player:tell("You hand ", this:title(), " to ", who:title(), ".");
    who:tell(player:titlec(), " ", $gender_utils:get_conj("hands/hand", player), " you ", this:title(), ".");
  else
    player:tell(who:titlec(), " ", $gender_utils:get_conj("does/do", who), " not want that item.");
  endif
endif
.

@verb #5:"examine_key" this none this
@program #5:examine_key
"examine_key(examiner)";
"return a list of strings to be told to the player, indicating what the key on this type of object means, and what this object's key is set to.";
"the default will only tell the key to a wizard or this object's owner.";
who = args[1];
if (((caller == this) && $perm_utils:controls(who, this)) && (this.key != 0))
  return {tostr(this:title(), " can only be moved to locations matching this key:"), tostr("  ", $lock_utils:unparse_key(this.key))};
endif
.

@verb #5:"look_contents_msg" this none this xd #128
@program #5:look_contents_msg
return $string_utils:pronoun_sub(this.(verb), this);
"Last modified Sat Dec  3 03:30:32 2022 UTC by Saeed (#128).";
.

@prop #5."drop_failed_msg" "You can't seem to drop %t here." rc
@prop #5."drop_succeeded_msg" "You drop %t." rc
@prop #5."odrop_failed_msg" "tries to drop %t but fails!" rc
@prop #5."odrop_succeeded_msg" "drops %t." rc
@prop #5."otake_succeeded_msg" "picks up %t." rc
@prop #5."otake_failed_msg" "" rc
@prop #5."take_succeeded_msg" "You take %t." rc
@prop #5."take_failed_msg" "You can't pick that up." rc
@prop #5."look_contents_msg" "" rc
;;#5.("aliases") = {"generic thing"}
;;#5.("object_size") = {7011, 1669929999}

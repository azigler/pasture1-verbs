@create $generic_editor named Note Editor:Note Editor,nedit
@verb #48:"e*dit" any none none
@program #48:edit
if (this:changed(who = player in this.active))
  player:tell("You are still editing ", this:working_on(who), ".  Please type ABORT or SAVE first.");
elseif (spec = this:parse_invoke(dobjstr, verb))
  this:init_session(who, @spec);
endif
.

@verb #48:"save" any none none
@program #48:save
if (!(who = this:loaded(player)))
  player:tell(this:nothing_loaded_msg());
  return;
endif
if (!dobjstr)
  note = this.objects[who];
elseif (1 == (note = this:note_match_failed(dobjstr)))
  return;
else
  this.objects[who] = note;
endif
text = this:text(who);
strmode = (length(text) <= 1) && this.strmode[who];
if (strmode)
  text = text ? text[1] | "";
endif
if (ERR == typeof(result = this:set_note_text(note, text)))
  player:tell("Text not saved to ", this:working_on(who), ":  ", result);
  if ((result == E_TYPE) && (typeof(note) == OBJ))
    player:tell("Do `mode list' and try saving again.");
  elseif (!dobjstr)
    player:tell("Use `save' with an argument to save the text elsewhere.");
  endif
else
  player:tell("Text written to ", this:working_on(who), strmode ? " as a single string." | ".");
  this:set_changed(who, 0);
endif
.

@verb #48:"init_session" this none this
@program #48:init_session
if (this:ok(who = args[1]))
  this.strmode[who] = strmode = typeof(text = args[3]) == STR;
  this:load(who, strmode ? text ? {text} | {} | text);
  this.objects[who] = args[2];
  player:tell("Now editing ", this:working_on(who), ".", strmode ? "  [string mode]" | "");
endif
.

@verb #48:"working_on" this none this
@program #48:working_on
if (!(who = args[1]))
  return "????";
endif
spec = this.objects[who];
if (typeof(spec) == LIST)
  object = spec[1];
  prop = spec[2];
else
  object = spec;
  prop = 0;
endif
return valid(object) ? tostr("\"", object.name, "\"(", object, ")", prop ? "." + prop | "") | tostr(prop ? ("." + prop) + " on " | "", "invalid object (", object, ")");
.

@verb #48:"parse_invoke" this none this
@program #48:parse_invoke
":parse_invoke(string,verb)";
" string is the actual commandline string indicating what we are to edit";
" verb is the command verb that is attempting to invoke the editor";
if (caller != this)
  raise(E_PERM);
elseif (!(string = args[1]))
  player:tell_lines({("Usage:  " + args[2]) + " <note>   (where <note> is some note object)", ("        " + args[2]) + "          (continues editing an unsaved note)"});
elseif (1 == (note = this:note_match_failed(string)))
elseif (ERR == typeof(text = this:note_text(note)))
  player:tell("Couldn't retrieve text:  ", text);
elseif ((player:edit_option("local") == 0) && $edit_utils:get_option("default_editor", player))
  fork (0)
    text = $edit_utils:editor((!text) ? {} | text);
    result = $note_editor:set_note_text(note, text);
    if (typeof(result) == ERR)
      player:tell("Unable to set text: ", e[2]);
    else
      player:tell("Edited ", note[2], " of ", $su:nn(note[1]), ".");
    endif
  endfork
  kill_task(task_id());
else
  return {note, text};
endif
return 0;
.

@verb #48:"note_text" this none this rxd #2
@program #48:note_text
"WIZARDLY";
if ((caller != $note_editor) || (caller_perms() != $note_editor.owner))
  return E_PERM;
endif
set_task_perms(player);
if (typeof(spec = args[1]) == OBJ)
  text = spec:text();
else
  text = `spec[1].(spec[2]) ! ANY';
endif
if (typeof(text) in {ERR, STR, LIST})
  return text;
else
  return E_TYPE;
endif
.

@verb #48:"set_note_text" this none this rxd #2
@program #48:set_note_text
"WIZARDLY";
if ((caller != $note_editor) || (caller_perms() != $note_editor.owner))
  return E_PERM;
endif
set_task_perms(player);
attempt = E_NONE;
if (typeof(spec = args[1]) == OBJ)
  return spec:set_text(args[2]);
elseif ($object_utils:has_callable_verb(spec[1], "set_" + spec[2]))
  attempt = spec[1]:("set_" + spec[2])(args[2]);
endif
if (typeof(attempt) == ERR)
  return `spec[1].(spec[2]) = args[2] ! ANY';
else
  return attempt;
endif
.

@verb #48:"note_match_failed" this none this
@program #48:note_match_failed
if (pp = $code_utils:parse_propref(string = args[1]))
  object = pp[1];
  prop = pp[2];
else
  object = string;
  prop = 0;
endif
if ($command_utils:object_match_failed(note = player:my_match_object(object, this:get_room(player)), object))
elseif (prop)
  if (!$object_utils:has_property(note, prop))
    player:tell(object, " has no \".", prop, "\" property.");
  else
    return {note, prop};
  endif
elseif ((!$object_utils:has_callable_verb(note, "text")) || (!$object_utils:has_callable_verb(note, "set_text")))
  return {note, "description"};
  "... what we used to do.  but why barf?   that's no fun...";
  player:tell(object, "(", note, ") doesn't look like a note.");
else
  return note;
endif
return 1;
.

@verb #48:"w*hat" none none none
@program #48:what
pass(@args);
if ((who = this:loaded(player)) && this.strmode[who])
  player:tell("Text will be stored as a single string instead of a list when possible.");
endif
.

@verb #48:"mode" any none none
@program #48:mode
"mode [string|list]";
if (!(who = this:loaded(player)))
  player:tell(this:nothing_loaded_msg());
  return;
endif
if (dobjstr && (index("string", dobjstr) == 1))
  this.strmode[who] = mode = 1;
  player:tell("Now in string mode:");
elseif (dobjstr && (index("list", dobjstr) == 1))
  this.strmode[who] = mode = 0;
  player:tell("Now in list mode:");
elseif (dobjstr)
  player:tell("Unrecognized mode:  ", dobjstr);
  player:tell("Should be one of `string' or `list'");
  return;
else
  player:tell("Currently in ", (mode = this.strmode[who]) ? "string " | "list ", "mode:");
endif
if (mode)
  player:tell("  store text as a single string instead of a list when possible.");
else
  player:tell("  always store text as a list of strings.");
endif
.

@verb #48:"local_editing_info" this none this rxd #36
@program #48:local_editing_info
{what, text} = args;
cmd = (typeof(text) == STR) ? "@set-note-string" | "@set-note-text";
name = (typeof(what) == OBJ) ? what.name | tostr(what[1].name, ".", what[2]);
note = (typeof(what) == OBJ) ? what | tostr(what[1], ".", what[2]);
"Check if the text is a list of strings. If so, edit it like text. Otherwise, parse values.";
type = "str:";
for x in (text)
  if (typeof(x) != STR)
    type = "val:";
    break;
  endif
endfor
ref = tostr(type, (typeof(what) == OBJ) ? tostr(what, ".text") | tostr(what[1], ".", what[2]));
return {name, text, tostr(cmd, " ", note), ref, "string-list"};
.

@verb #48:"set_*" this none this
@program #48:set_
if ($perm_utils:controls(caller_perms(), this))
  return pass(@args);
else
  return E_PERM;
endif
.

@prop #48."strmode" {} r
@prop #48."objects" {} rc
;;#48.("commands2") = {{"say", "emote", "lis*t", "ins*ert", "n*ext,p*rev", "enter", "del*ete", "f*ind", "s*ubst", "m*ove,c*opy", "join*l", "fill"}, {"y*ank", "w*hat", "mode", "e*dit", "save", "abort", "q*uit,done,pause"}}
;;#48.("help") = {}
;;#48.("no_text_msg") = "Note is devoid of text."
;;#48.("commands") = {{"e*dit", "<note>"}, {"save", "[<note>]"}, {"mode", "[string|list]"}}
;;#48.("previous_session_msg") = "You need to ABORT or SAVE this note before editing any other."
;;#48.("stateprops") = {{"strmode", 0}, {"objects", 0}, {"texts", 0}, {"changes", 0}, {"inserting", 1}, {"readable", 0}}
;;#48.("depart_msg") = "A small swarm of 3x5 index cards arrives, engulfs %n, and carries %o away."
;;#48.("return_msg") = "A small swarm of 3x5 index cards blows in and disperses, revealing %n."
;;#48.("no_littering_msg") = {"Partially edited text will be here when you get back.", "To return, give the `@notedit' command with no arguments.", "Please come back and SAVE or ABORT if you don't intend to be working on this text in the immediate future.  Keep Our MOO Clean!  No Littering!"}
;;#48.("no_change_msg") = "Note has not been modified since the last save."
;;#48.("change_msg") = "There are changes."
;;#48.("nothing_loaded_msg") = "Use the EDIT command to select a note."
;;#48.("who_location_msg") = "%L [editing notes]"
;;#48.("entrances") = {#5750}
;;#48.("blessed_task") = 2137271057
;;#48.("aliases") = {"Note Editor", "nedit"}
;;#48.("description") = {}
;;#48.("object_size") = {15810, 1669929999}

@create $root_class named @paranoid database:@paranoid database,paranoid
@verb #80:"ensure_props_exist" this none this
@program #80:ensure_props_exist
"*Must* be called with PDATA first, and LINES second.";
if ((caller != this) && (!caller_perms().wizard))
  return E_PERM;
else
  try
    this.(args[2]);
  except (E_PROPNF)
    add_property(this, args[2], {}, {$hacker, ""});
  endtry
  try
    this.(args[3]);
  except (E_PROPNF)
    add_property(this, args[3], 5, {$hacker, ""});
  endtry
endif
.

@verb #80:"init_for_core" this none this
@program #80:init_for_core
if (!caller_perms().wizard)
  return;
else
  for x in (properties(this))
    if (x[1] == "#")
      delete_property(this, x);
    endif
    $command_utils:suspend_if_needed(0);
  endfor
  pass(@args);
endif
.

@verb #80:"add_data" this none this
@program #80:add_data
{who, newdata} = args;
if (is_player(who) && caller_perms().wizard)
  "if ($perm_utils:controls(caller_perms(), who) && is_player(who))";
  d = tostr(who, "pdata");
  l = tostr(who, "lines");
  this:ensure_props_exist(who, d, l);
  data = this.(d);
  lines = this.(l);
  "Icky G7 code copied straight out of $player:tell.";
  if (((len = length(this.(d) = {@data, newdata})) * 2) > (lines * 3))
    this.(d) = this.(d)[(len - lines) + 1..len];
  endif
else
  return E_PERM;
endif
.

@verb #80:"get_data" this none this
@program #80:get_data
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
  d = tostr(who, "pdata");
  if (typeof(`this.(d) ! ANY') == LIST)
    return this.(d);
  else
    return {};
  endif
else
  return E_PERM;
endif
.

@verb #80:"erase_data" this none this
@program #80:erase_data
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
  d = tostr(who, "pdata");
  "OK if this would toss its cookies if no prop, no damage.";
  `this.(d) = {} ! ANY';
else
  return E_PERM;
endif
.

@verb #80:"set_kept_lines" this none this
@program #80:set_kept_lines
maximum = this.max_lines;
who = args[1];
if ($perm_utils:controls(caller_perms(), who) && is_player(who))
  l = tostr(who, "lines");
  this:ensure_props_exist(who, l, l);
  kept = min(args[2], maximum);
  this.(l) = kept;
  return kept;
else
  return E_PERM;
endif
.

@verb #80:"gc" this none this
@program #80:gc
if ((((caller != this) && (caller_perms() != #-1)) && (caller_perms() != player)) || (!player.wizard))
  $error:raise(E_PERM);
endif
threshold = ((60 * 60) * 24) * 3;
for x in (properties(this))
  if (x[1] == "#")
    l = length(x);
    who = toobj(x[1..l - 5]);
    if (((!valid(who)) || (!is_player(who))) || (!this:is_paranoid(who)))
      delete_property(this, x);
    else
      if (index(x, "lines"))
        if (typeof(this.(x)) != INT)
          this.(x) = 10;
        endif
      elseif (index(x, "pdata"))
        if (((!$object_utils:connected(who)) && (who.last_disconnect_time < (time() - threshold))) && (who.last_connect_time < (time() - threshold)))
          this.(x) = {};
        endif
        if (typeof(this.(x)) != LIST)
          this.(x) = {};
        endif
      endif
    endif
  endif
  $command_utils:suspend_if_needed(0);
endfor
.

@verb #80:"help_msg" this none this rxd #2
@program #80:help_msg
return this:description();
.

@verb #80:"semiweeklyish" this none this rxd #2
@program #80:semiweeklyish
if (!caller_perms().wizard)
  return E_PERM;
else
  threedays = (3 * 24) * 3600;
  fork ((((7 * 60) * 60) + threedays) - (time() % threedays))
    this:(verb)();
  endfork
  this:gc();
endif
.

@verb #80:"is_paranoid" this none this rxd #2
@program #80:is_paranoid
"Some people make their .paranoid !r.  Wizardly verb to retrieve value.";
return `args[1].paranoid ! ANY';
.

@prop #80."max_lines" 30 r #2
@prop #80."#133lines" 30 ""
@prop #80."#133pdata" {} ""
;;#80.("#133pdata") = {{{{#133, "freeze", #133, #6, #133, 11}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"10.0 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 11}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"10.0 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 8}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"8.74 seconds", " roundtime."}}, {{{#133, "freeze", #133, #6, #133, 8}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"7.37 seconds", " roundtime."}}, {{{#133, "freeze", #133, #6, #133, 8}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"6.26 seconds", " roundtime."}}, {{{#133, "freeze", #133, #6, #133, 8}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"5.10 seconds", " roundtime."}}, {{{#133, "freeze", #133, #6, #133, 8}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"3.97 seconds", " roundtime."}}, {{{#133, "freeze", #133, #6, #133, 8}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"2.67 seconds", " roundtime."}}, {{{#133, "freeze", #133, #6, #133, 8}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"1.11 seconds", " roundtime."}}, {{{#133, "freeze", #133, #6, #133, 11}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"10.0 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 12}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"10.0 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 12}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"10.0 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 9}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"9 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 9}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"8 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 9}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"7 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 9}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"5 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 9}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"4 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 12}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"10 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 9}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"8 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 9}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"7 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 9}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"6 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 9}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"5 seconds roundtime."}}, {{{#133, "freeze", #133, #6, #133, 10}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {0}}, {{{#133, "freeze", #133, #6, #133, 7}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"your face is good"}}, {{{#133, "freeze", #133, #6, #133, 10}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {0}}, {{{#133, "freeze", #133, #6, #133, 7}, {#-1, "", #133, #-1, #133, 3}, {#-1, "eval", #-1, #-1, #133, 2}, {#133, "eval_cmd_string", #133, #58, #133, 19}, {#133, "eval", #133, #58, #133, 14}, {#133, "<cmd-line>", #133}}, {"You cannot seem to do anything."}}, {{{#175, "look_self", #2, #3, #133, 2}, {#175, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"an infinite expanse"}}, {{{#175, "look_self", #2, #1, #133, 3}, {#175, "look_self", #2, #3, #133, 4}, {#175, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"Little can be seen through the heavy fog blanketing this area, blurry and indistinct shapes hidden within the pitch black darkness that has enveloped this realm. All feeling seems to vanish from one's limbs as soon as they are encircled by the fog. Latent energies slumber within the surrounding dark. What is the potential a voidbarer could cokes?"}}, {{{#175, "tell_contents", #2, #3, #133, 41}, {#175, "look_self", #2, #3, #133, 6}, {#175, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"You see ", "a gigantic descriptionless spaghetti monster, a fork equipped spaghetti thug, and A folded hamburger", " here."}}, {{{#175, "tell_contents", #2, #3, #133, 53}, {#175, "look_self", #2, #3, #133, 6}, {#175, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"up", " (", #176, ") leads to ", "Cavern of tests.", " (", #141, ") via {", "up", "}."}}, {{{#133, "@verbs", #133, #58, #133, 17}, {#133, "<cmd-line>", #133}}, {";verbs(", #180, ") => ", "{\"cast\", \"feature_ok\"}"}}, {{{#175, "look_self", #2, #3, #133, 2}, {#175, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"an infinite expanse"}}, {{{#175, "look_self", #2, #1, #133, 3}, {#175, "look_self", #2, #3, #133, 4}, {#175, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"Little can be seen through the heavy fog blanketing this area, blurry and indistinct shapes hidden within the pitch black darkness that has enveloped this realm. All feeling seems to vanish from one's limbs as soon as they are encircled by the fog. Latent energies slumber within the surrounding dark. What is the potential a voidbarer could cokes?"}}, {{{#175, "tell_contents", #2, #3, #133, 41}, {#175, "look_self", #2, #3, #133, 6}, {#175, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"You see ", "a gigantic descriptionless spaghetti monster, a fork equipped spaghetti thug, and A folded hamburger", " here."}}, {{{#175, "tell_contents", #2, #3, #133, 53}, {#175, "look_self", #2, #3, #133, 6}, {#175, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"up", " (", #176, ") leads to ", "Cavern of tests.", " (", #141, ") via {", "up", "}."}}, {{{#135, "keep_alive", #128, #135, #128, 2}, {#134, "check_cron_tasks", #128, #134, #128, 22}, {#128, "<cmd-line>", #128}}, {"#$#keep_alive"}}, {{{#135, "keep_alive", #128, #135, #128, 2}, {#134, "check_cron_tasks", #128, #134, #128, 22}, {#128, "<cmd-line>", #128}}, {"#$#keep_alive"}}}
;;#80.("aliases") = {"@paranoid database", "paranoid"}
;;#80.("description") = {"", "This object stores the @paranoid data from :tell.  Normally it is not necessary to access these things directly.  All verbs are controlled by a caller_perms() check.  All data is stored in the old .responsible format.", "", ":add_data(who,data) adds one line's worth of data to the collection, trimming from the front as necessary.", "", ":get_data(who) retrieves the entire batch of data.", "", ":erase_data(who) sets the data to {}", "", ":set_kept_lines(who,number) Changes the number of kept lines.  Maximum is 20.", "", "Core verbs that call the above are this are $player:tell, @check, @paranoid, and :erase_paranoid_data.", "", "Internal:  ", "   Properties used are", "   tostr(player)+\"lines\"", "   tostr(player)+\"pdata\"", "   :ensure_props_exist(who,linesname,dataname):  creates the above", "   :GC() --- loops over all data and verifies they're for players."}
;;#80.("object_size") = {9154, 1641541193}

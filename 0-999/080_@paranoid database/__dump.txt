@create $root_class named @paranoid database:@paranoid database,paranoid
@verb #80:"ensure_props_exist" this none this
@program #80:ensure_props_exist
"*Must* be called with PDATA first, and LINES second.";
if ((caller != this) && (!caller_perms().wizard))
  return E_PERM;
else
  try
    this.(args[2]);
  except (E_PROPNF)
    add_property(this, args[2], {}, {$hacker, ""});
  endtry
  try
    this.(args[3]);
  except (E_PROPNF)
    add_property(this, args[3], 5, {$hacker, ""});
  endtry
endif
.

@verb #80:"init_for_core" this none this
@program #80:init_for_core
if (!caller_perms().wizard)
  return;
else
  for x in (properties(this))
    if (x[1] == "#")
      delete_property(this, x);
    endif
    $command_utils:suspend_if_needed(0);
  endfor
  pass(@args);
endif
.

@verb #80:"add_data" this none this
@program #80:add_data
{who, newdata} = args;
if (is_player(who) && caller_perms().wizard)
  "if ($perm_utils:controls(caller_perms(), who) && is_player(who))";
  d = tostr(who, "pdata");
  l = tostr(who, "lines");
  this:ensure_props_exist(who, d, l);
  data = this.(d);
  lines = this.(l);
  "Icky G7 code copied straight out of $player:tell.";
  if (((len = length(this.(d) = {@data, newdata})) * 2) > (lines * 3))
    this.(d) = this.(d)[(len - lines) + 1..len];
  endif
else
  return E_PERM;
endif
.

@verb #80:"get_data" this none this
@program #80:get_data
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
  d = tostr(who, "pdata");
  if (typeof(`this.(d) ! ANY') == LIST)
    return this.(d);
  else
    return {};
  endif
else
  return E_PERM;
endif
.

@verb #80:"erase_data" this none this
@program #80:erase_data
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
  d = tostr(who, "pdata");
  "OK if this would toss its cookies if no prop, no damage.";
  `this.(d) = {} ! ANY';
else
  return E_PERM;
endif
.

@verb #80:"set_kept_lines" this none this
@program #80:set_kept_lines
maximum = this.max_lines;
who = args[1];
if ($perm_utils:controls(caller_perms(), who) && is_player(who))
  l = tostr(who, "lines");
  this:ensure_props_exist(who, l, l);
  kept = min(args[2], maximum);
  this.(l) = kept;
  return kept;
else
  return E_PERM;
endif
.

@verb #80:"gc" this none this
@program #80:gc
if ((((caller != this) && (caller_perms() != #-1)) && (caller_perms() != player)) || (!player.wizard))
  $error:raise(E_PERM);
endif
threshold = ((60 * 60) * 24) * 3;
for x in (properties(this))
  if (x[1] == "#")
    l = length(x);
    who = toobj(x[1..l - 5]);
    if (((!valid(who)) || (!is_player(who))) || (!this:is_paranoid(who)))
      delete_property(this, x);
    else
      if (index(x, "lines"))
        if (typeof(this.(x)) != INT)
          this.(x) = 10;
        endif
      elseif (index(x, "pdata"))
        if (((!$object_utils:connected(who)) && (who.last_disconnect_time < (time() - threshold))) && (who.last_connect_time < (time() - threshold)))
          this.(x) = {};
        endif
        if (typeof(this.(x)) != LIST)
          this.(x) = {};
        endif
      endif
    endif
  endif
  $command_utils:suspend_if_needed(0);
endfor
.

@verb #80:"help_msg" this none this rxd #2
@program #80:help_msg
return this:description();
.

@verb #80:"semiweeklyish" this none this rxd #2
@program #80:semiweeklyish
if (!caller_perms().wizard)
  return E_PERM;
else
  threedays = (3 * 24) * 3600;
  fork ((((7 * 60) * 60) + threedays) - (time() % threedays))
    this:(verb)();
  endfork
  this:gc();
endif
.

@verb #80:"is_paranoid" this none this rxd #2
@program #80:is_paranoid
"Some people make their .paranoid !r.  Wizardly verb to retrieve value.";
return `args[1].paranoid ! ANY';
.

@prop #80."max_lines" 30 r #2
@prop #80."#133lines" 10 ""
@prop #80."#133pdata" {} ""
;;#80.("#133pdata") = {{{{#130, "chat", #129, #130, #133, 3}, {#133, "my_huh", #133, #6, #133, 35}, {#56, "do_huh", #133, #56, #133, 13}, {#133, "chat", #133, #1, #133, 2}, {#133, "<cmd-line>", #133}}, {"caranov says to the whole MOO, \"indeed it still does!\""}}, {{{#133, "changelog", #133, #6, #133, 12}, {#133, "<cmd-line>", #133}}, {"Last 1 entries"}}, {{{#133, "changelog", #133, #6, #133, 13}, {#133, "<cmd-line>", #133}}, {"12.03.2022:", "Added PEER [direction] to look in [direction] before going to the monumental effort of actually walking there. (lisdude): 02:52:58", "Added integration message support for objects when LOOKing in a room. The basic usage consists of setting the .look_contents_msg property of the object in question (currently only defined on $thing since most virtual reality items typhically descend from that), and relies on a :look_contents_msg verb to handle pronoun substitutions and all that fun stuff. People looking to extend integration messages to be more interesting can override this verb on their own objects.", "Updated @LIST to display a verb's last modified timestamp (if any) prior to printing the verb's code. (Saeed): 03:47:52", "Room matching has been slightly improved. It no longer matches to firstword only, but rather gets all aliases. It can also match to ordinal references now, for instance second note. (caranov): 10:20:14", "Says now have playerwritten emotions and tones, along with new natural punctuation ones. It is heavily recommended to use help me:say if you are interested in using it to its full extent. (caranov): 14:55:28"}}, {{{#130, "chat", #129, #130, #133, 3}, {#133, "my_huh", #133, #6, #133, 35}, {#56, "do_huh", #133, #56, #133, 13}, {#133, "chat", #133, #1, #133, 2}, {#133, "<cmd-line>", #133}}, {"caranov says to the whole MOO, \"man this new net rocks downloadwise. still kind of sucks in games though\""}}, {{{#99, "show_who_listing", #98, #99, #133, 122}, {#133, "who", #98, #100, #133, 9}, {#133, "<cmd-line>", #133}}, {"Player name               Connected    Idle time    Location"}}, {{{#99, "show_who_listing", #98, #99, #133, 122}, {#133, "who", #98, #100, #133, 9}, {#133, "<cmd-line>", #133}}, {"-----------               ---------    ---------    --------"}}, {{{#99, "show_who_listing", #98, #99, #133, 122}, {#133, "who", #98, #100, #133, 9}, {#133, "<cmd-line>", #133}}, {"caranov (#133)            45 minutes   0 seconds    Cavern of tests."}}, {{{#99, "show_who_listing", #98, #99, #133, 122}, {#133, "who", #98, #100, #133, 9}, {#133, "<cmd-line>", #133}}, {"Zig (#2) [AFK]            4 minutes    4 minutes    The First Room"}}, {{{#99, "show_who_listing", #98, #99, #133, 122}, {#133, "who", #98, #100, #133, 9}, {#133, "<cmd-line>", #133}}, {"lisdude (#139) [AFK]      a day        6 minutes    The First Room"}}, {{{#99, "show_who_listing", #98, #99, #133, 122}, {#133, "who", #98, #100, #133, 9}, {#133, "<cmd-line>", #133}}, {"Saeed (#128)              a day        9 hours      The First Room"}}, {{{#99, "show_who_listing", #98, #99, #133, 122}, {#133, "who", #98, #100, #133, 9}, {#133, "<cmd-line>", #133}}, {""}}, {{{#99, "show_who_listing", #98, #99, #133, 122}, {#133, "who", #98, #100, #133, 9}, {#133, "<cmd-line>", #133}}, {"Total: 4 players, 2 of whom have been active recently."}}}
;;#80.("aliases") = {"@paranoid database", "paranoid"}
;;#80.("description") = {"", "This object stores the @paranoid data from :tell.  Normally it is not necessary to access these things directly.  All verbs are controlled by a caller_perms() check.  All data is stored in the old .responsible format.", "", ":add_data(who,data) adds one line's worth of data to the collection, trimming from the front as necessary.", "", ":get_data(who) retrieves the entire batch of data.", "", ":erase_data(who) sets the data to {}", "", ":set_kept_lines(who,number) Changes the number of kept lines.  Maximum is 20.", "", "Core verbs that call the above are this are $player:tell, @check, @paranoid, and :erase_paranoid_data.", "", "Internal:  ", "   Properties used are", "   tostr(player)+\"lines\"", "   tostr(player)+\"pdata\"", "   :ensure_props_exist(who,linesname,dataname):  creates the above", "   :GC() --- loops over all data and verifies they're for players."}
;;#80.("object_size") = {9154, 1641541193}

@create $root_class named @paranoid database:@paranoid database,paranoid
@verb #80:"ensure_props_exist" this none this
@program #80:ensure_props_exist
"*Must* be called with PDATA first, and LINES second.";
if ((caller != this) && (!caller_perms().wizard))
  return E_PERM;
else
  try
    this.(args[2]);
  except (E_PROPNF)
    add_property(this, args[2], {}, {$hacker, ""});
  endtry
  try
    this.(args[3]);
  except (E_PROPNF)
    add_property(this, args[3], 5, {$hacker, ""});
  endtry
endif
.

@verb #80:"init_for_core" this none this
@program #80:init_for_core
if (!caller_perms().wizard)
  return;
else
  for x in (properties(this))
    if (x[1] == "#")
      delete_property(this, x);
    endif
    $command_utils:suspend_if_needed(0);
  endfor
  pass(@args);
endif
.

@verb #80:"add_data" this none this
@program #80:add_data
{who, newdata} = args;
if (is_player(who) && caller_perms().wizard)
  "if ($perm_utils:controls(caller_perms(), who) && is_player(who))";
  d = tostr(who, "pdata");
  l = tostr(who, "lines");
  this:ensure_props_exist(who, d, l);
  data = this.(d);
  lines = this.(l);
  "Icky G7 code copied straight out of $player:tell.";
  if (((len = length(this.(d) = {@data, newdata})) * 2) > (lines * 3))
    this.(d) = this.(d)[(len - lines) + 1..len];
  endif
else
  return E_PERM;
endif
.

@verb #80:"get_data" this none this
@program #80:get_data
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
  d = tostr(who, "pdata");
  if (typeof(`this.(d) ! ANY') == LIST)
    return this.(d);
  else
    return {};
  endif
else
  return E_PERM;
endif
.

@verb #80:"erase_data" this none this
@program #80:erase_data
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
  d = tostr(who, "pdata");
  "OK if this would toss its cookies if no prop, no damage.";
  `this.(d) = {} ! ANY';
else
  return E_PERM;
endif
.

@verb #80:"set_kept_lines" this none this
@program #80:set_kept_lines
maximum = this.max_lines;
who = args[1];
if ($perm_utils:controls(caller_perms(), who) && is_player(who))
  l = tostr(who, "lines");
  this:ensure_props_exist(who, l, l);
  kept = min(args[2], maximum);
  this.(l) = kept;
  return kept;
else
  return E_PERM;
endif
.

@verb #80:"gc" this none this
@program #80:gc
if ((((caller != this) && (caller_perms() != #-1)) && (caller_perms() != player)) || (!player.wizard))
  $error:raise(E_PERM);
endif
threshold = ((60 * 60) * 24) * 3;
for x in (properties(this))
  if (x[1] == "#")
    l = length(x);
    who = toobj(x[1..l - 5]);
    if (((!valid(who)) || (!is_player(who))) || (!this:is_paranoid(who)))
      delete_property(this, x);
    else
      if (index(x, "lines"))
        if (typeof(this.(x)) != INT)
          this.(x) = 10;
        endif
      elseif (index(x, "pdata"))
        if (((!$object_utils:connected(who)) && (who.last_disconnect_time < (time() - threshold))) && (who.last_connect_time < (time() - threshold)))
          this.(x) = {};
        endif
        if (typeof(this.(x)) != LIST)
          this.(x) = {};
        endif
      endif
    endif
  endif
  $command_utils:suspend_if_needed(0);
endfor
.

@verb #80:"help_msg" this none this rxd #2
@program #80:help_msg
return this:description();
.

@verb #80:"semiweeklyish" this none this rxd #2
@program #80:semiweeklyish
if (!caller_perms().wizard)
  return E_PERM;
else
  threedays = (3 * 24) * 3600;
  fork ((((7 * 60) * 60) + threedays) - (time() % threedays))
    this:(verb)();
  endfork
  this:gc();
endif
.

@verb #80:"is_paranoid" this none this rxd #2
@program #80:is_paranoid
"Some people make their .paranoid !r.  Wizardly verb to retrieve value.";
return `args[1].paranoid ! ANY';
.

@prop #80."max_lines" 30 r #2
@prop #80."#133lines" 30 ""
@prop #80."#133pdata" {} ""
;;#80.("#133pdata") = {{{{#143, "look_self", #2, #1, #133, 5}, {#143, "look_self", #2, #3, #133, 4}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"You see nothing special."}}, {{{#143, "tell_contents", #2, #3, #133, 52}, {#143, "look_self", #2, #3, #133, 6}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"east", " (", #169, ") leads to ", "emerging on the other side of the testing cave", " (", #168, ") via {", "east", "}."}}, {{{#143, "look_self", #2, #3, #133, 2}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"a tunnel through a colossal pile of rubble"}}, {{{#143, "look_self", #2, #1, #133, 5}, {#143, "look_self", #2, #3, #133, 4}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"You see nothing special."}}, {{{#143, "tell_contents", #2, #3, #133, 52}, {#143, "look_self", #2, #3, #133, 6}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"east", " (", #169, ") leads to ", "emerging on the other side of the testing cave", " (", #168, ") via {", "east", "}."}}, {{{#143, "look_self", #2, #3, #133, 2}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"a tunnel through a colossal pile of rubble"}}, {{{#143, "look_self", #2, #1, #133, 5}, {#143, "look_self", #2, #3, #133, 4}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"You see nothing special."}}, {{{#143, "s", #133, #3, #133, 6}, {#133, "<cmd-line>", #133}}, {"You can't go that way."}}, {{{#168, "look_self", #2, #3, #133, 2}, {#168, "enterfunc", #2, #3, #133, 4}, {#-1, "move", #-1, #-1, #133, 4}, {#133, "moveto", #133, #57, #133, 2}, {#169, "move", #133, #7, #133, 16}, {#169, "invoke", #133, #7, #133, 3}, {#143, "e", #133, #3, #133, 4}, {#133, "<cmd-line>", #133}}, {"emerging on the other side of the testing cave"}}, {{{#168, "look_self", #2, #1, #133, 5}, {#168, "look_self", #2, #3, #133, 4}, {#168, "enterfunc", #2, #3, #133, 4}, {#-1, "move", #-1, #-1, #133, 4}, {#133, "moveto", #133, #57, #133, 2}, {#169, "move", #133, #7, #133, 16}, {#169, "invoke", #133, #7, #133, 3}, {#143, "e", #133, #3, #133, 4}, {#133, "<cmd-line>", #133}}, {"You see nothing special."}}, {{{#168, "tell_contents", #2, #3, #133, 53}, {#168, "look_self", #2, #3, #133, 6}, {#168, "enterfunc", #2, #3, #133, 4}, {#-1, "move", #-1, #-1, #133, 4}, {#133, "moveto", #133, #57, #133, 2}, {#169, "move", #133, #7, #133, 16}, {#169, "invoke", #133, #7, #133, 3}, {#143, "e", #133, #3, #133, 4}, {#133, "<cmd-line>", #133}}, {"west", " (", #173, ") leads to ", "a tunnel through a colossal pile of rubble", " (", #143, ") via {", "west", "}."}}, {{{#168, "announce_all", #2, #3, #133, 3}, {#168, "enterfunc", #2, #3, #133, 14}, {#133, "<cmd-line>", #133}}, {"a gigantic descriptionless spaghetti monster, a fork equipped spaghetti thug, and A folded hamburger follow in behind caranov"}}, {{{#143, "look_self", #2, #3, #133, 2}, {#143, "enterfunc", #2, #3, #133, 4}, {#-1, "move", #-1, #-1, #133, 4}, {#133, "moveto", #133, #57, #133, 2}, {#173, "move", #133, #7, #133, 16}, {#173, "invoke", #133, #7, #133, 3}, {#168, "w", #133, #3, #133, 4}, {#133, "<cmd-line>", #133}}, {"a tunnel through a colossal pile of rubble"}}, {{{#143, "look_self", #2, #1, #133, 5}, {#143, "look_self", #2, #3, #133, 4}, {#143, "enterfunc", #2, #3, #133, 4}, {#-1, "move", #-1, #-1, #133, 4}, {#133, "moveto", #133, #57, #133, 2}, {#173, "move", #133, #7, #133, 16}, {#173, "invoke", #133, #7, #133, 3}, {#168, "w", #133, #3, #133, 4}, {#133, "<cmd-line>", #133}}, {"You see nothing special."}}, {{{#143, "announce_all", #2, #3, #133, 3}, {#143, "enterfunc", #2, #3, #133, 14}, {#133, "<cmd-line>", #133}}, {"a gigantic descriptionless spaghetti monster, a fork equipped spaghetti thug, and A folded hamburger follow in behind caranov"}}, {{{#143, "south", #133, #3, #133, 6}, {#133, "<cmd-line>", #133}}, {"You can't go that way."}}, {{{#143, "look_self", #2, #3, #133, 2}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"a tunnel through a colossal pile of rubble"}}, {{{#143, "look_self", #2, #1, #133, 5}, {#143, "look_self", #2, #3, #133, 4}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"You see nothing special."}}, {{{#143, "tell_contents", #2, #3, #133, 41}, {#143, "look_self", #2, #3, #133, 6}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"You see ", "a gigantic descriptionless spaghetti monster, a fork equipped spaghetti thug, and A folded hamburger", " here."}}, {{{#143, "tell_contents", #2, #3, #133, 53}, {#143, "look_self", #2, #3, #133, 6}, {#143, "l", #2, #3, #133, 2}, {#133, "<cmd-line>", #133}}, {"east", " (", #169, ") leads to ", "emerging on the other side of the testing cave", " (", #168, ") via {", "east", "}."}}, {{{#133, "@locate", #133, #4, #133, 6}, {#133, "<cmd-line>", #133}}, {"Locating all objects matching caver:"}}, {{{#133, "@locate", #133, #4, #133, 7}, {#133, "<cmd-line>", #133}}, {}}, {{{#133, "@locate", #133, #4, #133, 13}, {#133, "<cmd-line>", #133}}, {"before a cavern (#137), owned by caranov (#133), currently located at $nothing (#-1)"}}, {{{#133, "@locate", #133, #4, #133, 13}, {#133, "<cmd-line>", #133}}, {"Cavern of tests. (#141), owned by caranov (#133), currently located at $nothing (#-1)"}}, {{{#133, "@locate", #133, #4, #133, 15}, {#133, "<cmd-line>", #133}}, {}}, {{{#133, "@locate", #133, #4, #133, 16}, {#133, "<cmd-line>", #133}}, {2, " objects found."}}, {{{#21, "make_exit", #133, #21, #133, 25}, {#133, "@dig", #133, #4, #133, 57}, {#133, "<cmd-line>", #133}}, {"Exit from ", "a tunnel through a colossal pile of rubble", " (", #143, ") to ", "Cavern of tests.", " (", #141, ") via ", "{\"south\"}", " created with id ", #174, "."}}, {{{#141, "look_self", #2, #3, #133, 2}, {#141, "enterfunc", #2, #3, #133, 4}, {#-1, "move", #-1, #-1, #133, 4}, {#133, "moveto", #133, #57, #133, 2}, {#174, "move", #133, #7, #133, 16}, {#174, "invoke", #133, #7, #133, 3}, {#143, "s", #133, #3, #133, 4}, {#133, "<cmd-line>", #133}}, {"Cavern of tests."}}, {{{#141, "look_self", #2, #1, #133, 5}, {#141, "look_self", #2, #3, #133, 4}, {#141, "enterfunc", #2, #3, #133, 4}, {#-1, "move", #-1, #-1, #133, 4}, {#133, "moveto", #133, #57, #133, 2}, {#174, "move", #133, #7, #133, 16}, {#174, "invoke", #133, #7, #133, 3}, {#143, "s", #133, #3, #133, 4}, {#133, "<cmd-line>", #133}}, {"You see nothing special."}}, {{{#141, "tell_contents", #2, #3, #133, 53}, {#141, "look_self", #2, #3, #133, 6}, {#141, "enterfunc", #2, #3, #133, 4}, {#-1, "move", #-1, #-1, #133, 4}, {#133, "moveto", #133, #57, #133, 2}, {#174, "move", #133, #7, #133, 16}, {#174, "invoke", #133, #7, #133, 3}, {#143, "s", #133, #3, #133, 4}, {#133, "<cmd-line>", #133}}, {"north", " (", #167, ") leads to ", "a tunnel through a colossal pile of rubble", " (", #143, ") via {", "north", "}."}}, {{{#141, "tell_contents", #2, #3, #133, 53}, {#141, "look_self", #2, #3, #133, 6}, {#141, "enterfunc", #2, #3, #133, 4}, {#-1, "move", #-1, #-1, #133, 4}, {#133, "moveto", #133, #57, #133, 2}, {#174, "move", #133, #7, #133, 16}, {#174, "invoke", #133, #7, #133, 3}, {#143, "s", #133, #3, #133, 4}, {#133, "<cmd-line>", #133}}, {"before", " (", #172, ") leads to ", "before a cavern", " (", #137, ") via {", "before", "}."}}, {{{#141, "announce_all", #2, #3, #133, 3}, {#141, "enterfunc", #2, #3, #133, 14}, {#133, "<cmd-line>", #133}}, {"a gigantic descriptionless spaghetti monster, a fork equipped spaghetti thug, and A folded hamburger follow in behind caranov"}}, {{{#130, "chat", #129, #130, #2, 3}, {#2, "my_huh", #2, #6, #2, 35}, {#56, "do_huh", #2, #56, #2, 13}, {#2, "chat", #2, #1, #2, 2}, {#2, "<cmd-line>", #2}}, {"Zig says to the whole MOO, \"saeed this @code-review command is COOL\""}}, {{{#130, "chat", #129, #130, #2, 3}, {#2, "my_huh", #2, #6, #2, 35}, {#56, "do_huh", #2, #56, #2, 13}, {#2, "chat", #2, #1, #2, 2}, {#2, "<cmd-line>", #2}}, {"Zig says to the whole MOO, \"its cool\""}}, {{{#49, "parse_invoke", #96, #49, #133, 58}, {#49, "invoke", #96, #50, #133, 37}, {#133, "@edit", #36, #6, #133, 6}, {#133, "<cmd-line>", #133}}, {"That object does not define that verb", "."}}, {{{#49, "parse_invoke", #96, #49, #133, 58}, {#49, "invoke", #96, #50, #133, 37}, {#133, "@edit", #36, #6, #133, 6}, {#133, "<cmd-line>", #133}}, {"That object does not define that verb", "."}}, {{{#49, "parse_invoke", #96, #49, #133, 45}, {#49, "invoke", #96, #50, #133, 37}, {#133, "@edit", #36, #6, #133, 6}, {#133, "<cmd-line>", #133}}, {"Object ", #133, " does not define that verb, but its ancestor ", #4, " does."}}}
;;#80.("aliases") = {"@paranoid database", "paranoid"}
;;#80.("description") = {"", "This object stores the @paranoid data from :tell.  Normally it is not necessary to access these things directly.  All verbs are controlled by a caller_perms() check.  All data is stored in the old .responsible format.", "", ":add_data(who,data) adds one line's worth of data to the collection, trimming from the front as necessary.", "", ":get_data(who) retrieves the entire batch of data.", "", ":erase_data(who) sets the data to {}", "", ":set_kept_lines(who,number) Changes the number of kept lines.  Maximum is 20.", "", "Core verbs that call the above are this are $player:tell, @check, @paranoid, and :erase_paranoid_data.", "", "Internal:  ", "   Properties used are", "   tostr(player)+\"lines\"", "   tostr(player)+\"pdata\"", "   :ensure_props_exist(who,linesname,dataname):  creates the above", "   :GC() --- loops over all data and verifies they're for players."}
;;#80.("object_size") = {9154, 1641541193}
